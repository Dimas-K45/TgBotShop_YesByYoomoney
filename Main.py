import aiogram
from aiogram import types, Dispatcher, executor, Bot
import Config
import SQLite_db
import sqlite3 as sq
from aiogram.dispatcher import filters
import requests
import re
import os
import sqlite3 as sq
from datetime import timedelta, datetime
from aiogram.types import Message

bot = Bot(Config.Settings['TOKEN_BOT'])
dp = Dispatcher(bot)

id_db = 0
role_db = 1
money_db = 2
total_buy_db = 3
AddProduct1 = [0]
DelProduct = [0]
WriteProduct = [0, 0, 0]
SandAll = [0]
CryptoPrice = [0, 0]
SetAdmin = [0]
DelCategory = [0]
Promo = [0]
Setpromo = [0]
DelPromo = [0]
ClearPromo = [0]
SearchUser = [0, 0]
DelUser = [0, 0]
UpPriceAll = [0]
DownPriceAll = [0]
UpPriceAllCent = [0]
DownPriceAllCent = [0]


async def AdminKeyboard():
    keyboard = types.ReplyKeyboardMarkup(
        row_width=2, resize_keyboard=True)
    buttons = ["–ö–∞—Ç–∞–ª–æ–≥",
               "–ü—Ä–æ—Ñ–∏–ª—å", "–ö—É–ø–∏—Ç—å", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å", "–ö—É—Ä—Å Crypto"]
    keyboard.add(*buttons)
    return keyboard


async def Keyboard():
    keyboard = types.ReplyKeyboardMarkup(
        row_width=2, resize_keyboard=True)
    buttons = ["–ö–∞—Ç–∞–ª–æ–≥",
               "–ü—Ä–æ—Ñ–∏–ª—å", "–ö—É–ø–∏—Ç—å", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    keyboard.add(*buttons)
    return keyboard


async def ListAdmin():
    Count = list(await SQLite_db.db_read_admin())
    CountZ = []
    for adm in Count:
        CountZ.append(adm[0])
        CountZ.append(adm[4])
        CountZ.append(adm[1])
    StrCountZ = ""
    Atr = 0
    while True:
        try:
            if CountZ[Atr+2] == "Admin":
                StrCountZ = StrCountZ + \
                    f"\nid: {CountZ[Atr]} | @{CountZ[Atr+1]}"
            elif CountZ[Atr+2] == "SuperAdmin":
                StrCountZ = StrCountZ + \
                    f"\n<b>id: {CountZ[Atr]} | @{CountZ[Atr+1]}</b> üòé"
            Atr += 3
        except:
            break
    return StrCountZ


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    try:
        if await SQLite_db.Add_user(message.from_id, str(message.from_user['username']).upper()):

            keyboard = types.ReplyKeyboardMarkup(
                row_width=2, resize_keyboard=True)
            buttons = ["–ö–∞—Ç–∞–ª–æ–≥",
                       "–ü—Ä–æ—Ñ–∏–ª—å", "–ö—É–ø–∏—Ç—å", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
            keyboard.add(*buttons)
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    except:
        keyboard = types.ReplyKeyboardMarkup(
            row_width=2, resize_keyboard=True)
        buttons = ["–ö–∞—Ç–∞–ª–æ–≥",
                   "–ü—Ä–æ—Ñ–∏–ª—å", "–ö—É–ø–∏—Ç—å", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        keyboard.add(*buttons)
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


@dp.message_handler(filters.Regexp(regexp=r"(–ú–µ–Ω—é)"))
async def bot_commands_handler(message_from: types.Message) -> None:
    user_id: str = str(message_from.from_id)
    await SQLite_db.Write_username(str(message_from.from_user['username']).upper(), int(message_from.from_id))

    if await SQLite_db.db_read_id(message_from.from_id, role_db) == "Admin" or await SQLite_db.db_read_id(message_from.from_id, role_db) == "SuperAdmin":

        await message_from.answer(f"–ü—Ä–∏–≤–µ—Ç!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
    else:
        await message_from.answer(f"–ü—Ä–∏–≤–µ—Ç!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã", reply_markup=await Keyboard(), parse_mode=types.ParseMode.HTML)


@dp.message_handler(filters.Regexp(regexp=r"(–ö–∞—Ç–∞–ª–æ–≥)"))
async def bot_commands_handler(message_from: types.Message) -> None:
    user_id: str = str(message_from.from_id)
    try:
        messag = (
            f"{await SQLite_db.db_read_product()}"
        )
        await message_from.answer(f"{messag}", parse_mode=types.ParseMode.HTML)
    except:
        await message_from.answer(f"ü•≤–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(text="ReadProduct_All")
async def send_random_value(call: types.CallbackQuery):
    messag = (
        f"{await SQLite_db.db_read_product_Admin()}"
    )
    await call.message.answer(f"{messag}", parse_mode=types.ParseMode.HTML)


@dp.message_handler(filters.Regexp(regexp=r"(–ü—Ä–æ—Ñ–∏–ª—å)"))
async def bot_commands_handler(message_from: types.Message) -> None:
    user_id: str = str(message_from.from_id)

    buttons = [types.InlineKeyboardButton(
        text="–í–≤–µ—Å—Ç–∏ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="InputPromo")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    messag = (
        "‚ûñ‚ûñ‚ûñ‚ûñ–ü–†–û–§–ò–õ–¨‚ûñ‚ûñ‚ûñ‚ûñ"
        f"\n\nüí∞–ë–∞–ª–∞–Ω—Å: {await SQLite_db.db_read_id(message_from.from_id, money_db)}"
        f"\n\nüè¶–ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É: {await SQLite_db.db_read_id(message_from.from_id, total_buy_db)}"
        f"\n\nID {await SQLite_db.db_read_id(message_from.from_id, id_db)}\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
    )
    await message_from.answer(messag, reply_markup=keyboard)


@dp.callback_query_handler(text="InputPromo")
async def send_random_value(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏ –ü—Ä–æ–º–æ–∫–æ–¥")
    global Promo
    Promo[0] = 1


@dp.message_handler(filters.Regexp(regexp=r"(–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å)"))
async def bot_commands_handler(message_from: types.Message) -> None:
    if await SQLite_db.db_read_id(message_from.from_id, role_db) == "Admin":
        buttons = [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="AddProduct"), types.InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="WriteProduct"), types.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="DelProduct"), types.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="DelCategory"), types.InlineKeyboardButton(
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤", callback_data="ReadProduct_All"), types.InlineKeyboardButton(
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", callback_data="SetPromo"), types.InlineKeyboardButton(
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–ª—å-–º–∏", callback_data="SetUser"), types.InlineKeyboardButton(
            text="–¶–µ–Ω–∞ –ö—Ä–∏–ø—Ç—ã", callback_data="PriceCrypto")]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        await message_from.answer(f"<b>üíé–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å</b>\n\n–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%d.%m.%Y, %H:%M:%S')}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    if await SQLite_db.db_read_id(message_from.from_id, role_db) == "SuperAdmin":
        buttons = [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="AddProduct"), types.InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="WriteProduct"), types.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="DelProduct"), types.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="DelCategory"), types.InlineKeyboardButton(
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤", callback_data="ReadProduct_All"), types.InlineKeyboardButton(
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω-–º–∏", callback_data="SetAdmin"), types.InlineKeyboardButton(
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", callback_data="SetPromo"), types.InlineKeyboardButton(
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–ª—å-–º–∏", callback_data="SetUser"), types.InlineKeyboardButton(
            text="–¶–µ–Ω–∞ –ö—Ä–∏–ø—Ç—ã", callback_data="PriceCrypto"), types.InlineKeyboardButton(
            text="–°–∫–∞—á–∞—Ç—å –ë–î", callback_data="Download_db"), types.InlineKeyboardButton(
            text="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="SendingAll")]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        await message_from.answer(f"<b>üòé–°—É–ø–µ—Ä –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å</b>\n\n–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%d.%m.%Y, %H:%M:%S')}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


@dp.message_handler(lambda msg: msg.text.lower() == "chat_gpt")
async def bot_commands_handler(message_from: types.Message):

    buttons = [types.InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å AI", callback_data="WriteAI")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)

    await message_from.answer(f"<b>–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å</b>\n\n<u>–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è AI:</u> {await SQLite_db.AI_Active()}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global gpt
    gpt[0] = 1


@dp.callback_query_handler(text="SetUser")
async def send_random_value(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(
        text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(
        text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    user, admin, superadmin = await SQLite_db.Count_All_User()
    await call.message.edit_text(f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\nüòÄ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user}\n\nüíé–ê–¥–º–∏–Ω–æ–≤: {admin}\n\nüòé–°—É–ø–µ—Ä–ê–¥–º–∏–Ω–æ–≤: {superadmin}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(text="SetPromo")
async def send_random_value(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(
        text="–ê–∫—Ç–∏–≤–Ω—ã–µ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="ActivPromo"), types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="SetNewPromo"), types.InlineKeyboardButton(
        text="–£–¥–∞–ª–∏—Ç—å –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="DelPromo"), types.InlineKeyboardButton(
        text="–û—á–∏—Å—Ç–∏—Ç—å –í—Å–µ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="ClearPromo")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", reply_markup=keyboard)


@dp.callback_query_handler(text="SearchUser")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    await call.message.answer(f"<b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–í–≤–µ–¥–∏ ID \n–∏–ª–∏\n @username", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global SearchUser
    SearchUser[0] = 1


@dp.callback_query_handler(text="DelUser")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    await call.message.answer(f"<b>‚ùå–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)</b>\n\n–í–≤–µ–¥–∏ ID \n–∏–ª–∏\n @username\n\n*<i>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</i>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global DelUser
    DelUser[0] = 1


@dp.callback_query_handler(text="ClearPromo")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ("–û–ß–ò–°–¢–ò–¢–¨", "–û—Ç–º–µ–Ω–∞")
    keyboard.add(*buttons)
    message = []
    for prom in list(await SQLite_db.db_read_all_promo()):
        if prom[2] > 0:
            message.append(str(f"<b>{prom[1]}</b>  |  {prom[2]}  üü¢\n"))
        elif prom[2] <= 0:
            message.append(str(f"<b>{prom[1]}</b>  |  {prom[2]}  üî¥\n"))
    string = "\n".join(message)
    await call.message.answer(f"–í—Å–µ –ü—Ä–æ–º–æ–∫–æ–¥—ã:\n\n{string}\n\n–¢–æ—á–Ω–æ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã?\n\n‚ö†Ô∏è<b>–û—á–∏—Å—Ç—è—Ç—Å—è –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö –∏ –∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏—è—Ö!</b>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global ClearPromo
    ClearPromo[0] = 1


@dp.callback_query_handler(text="DelPromo")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ("–û—Ç–º–µ–Ω–∞")
    keyboard.add(buttons)
    message = []
    for prom in list(await SQLite_db.db_read_all_promo()):
        if prom[2] > 0:
            message.append(str(f"<b>{prom[1]}</b>  |  {prom[2]}  üü¢\n"))
        elif prom[2] <= 0:
            message.append(str(f"<b>{prom[1]}</b>  |  {prom[2]}  üî¥\n"))
    string = "\n".join(message)
    await call.message.answer(f"–í—Å–µ –ü—Ä–æ–º–æ–∫–æ–¥—ã:\n\n{string}\n\n<b><i>–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å</i></b>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global DelPromo
    DelPromo[0] = 1


@dp.callback_query_handler(text="ActivPromo")
async def send_random_value(call: types.CallbackQuery):
    message = []
    for prom in list(await SQLite_db.db_read_activ_promo()):
        message.append(str(f"<b>{prom[1]}</b>  |  {prom[2]}\n"))
    string = "\n".join(message)
    if string == "":
        string = "<b>–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>"
    await call.message.answer(f"<i>–ê–∫—Ç–∏–≤–Ω—ã–µ –ü—Ä–æ–º–æ–∫–æ–¥—ã:</i>\n\n{string}", parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(text="SetNewPromo")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ("–û—Ç–º–µ–Ω–∞")
    keyboard.add(buttons)
    await call.message.answer("<b>–í–≤–µ–¥–∏ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n*–í–≤–µ–¥–∏ —Å–Ω–∞—á–∞–ª–æ –±—É–∫–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –°–õ–ò–¢–ù–û –≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ(–Ω–∞–ø—Ä–∏–º–µ—Ä:DLK100)", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global Setpromo
    Setpromo[0] = 1


@dp.callback_query_handler(text="Download_db")
async def send_random_value(call: types.CallbackQuery):
    await call.message.answer("‚è≥–ó–∞–≥—Ä—É–∑–∫–∞...")
    with open('TG_db_1.db', 'rb') as db_file:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
        await call.message.answer_document(db_file)


@dp.callback_query_handler(text="DelCategory")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = await SQLite_db.search_all_category()
    keyboard.add(*buttons)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    await call.message.delete()
    await call.message.answer(f"<b>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è <i>–ö–ê–¢–ï–ì–û–†–ò–ò</i> –≤–≤–µ–¥–∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n*–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö <i>–ö–ê–¢–ï–ì–û–†–ò–ô</i> –≤–≤–µ–¥–∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</b>\n\n{await SQLite_db.db_read_delete_product()}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global DelCategory
    DelCategory[0] = 1


@dp.callback_query_handler(text="SetAdmin")
async def send_random_value(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(
        text="–ù–∞–∑–Ω–∞—á–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="SetNewAdmin")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(f"<b>–ê–¥–º–∏–Ω—ã</b>\n\n{await ListAdmin()}\n\n*üòé –°—É–ø–µ—Ä–ê–¥–º–∏–Ω", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(text="SetNewAdmin")
async def send_random_value(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    global SetAdmin
    SetAdmin[0] = 1


@dp.message_handler(lambda msg: msg.text.lower() == "–Ω–∞–∑–Ω–∞—á–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def bot_commands_handler(message_from: types.Message) -> None:
    if await SQLite_db.db_read_id(message_from.from_id, role_db) == "SuperAdmin":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ("–û—Ç–º–µ–Ω–∞")
        keyboard.add(*buttons)
        await message_from.answer("–í–≤–µ–¥–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        global SetAdmin
        SetAdmin[0] = 1


@dp.callback_query_handler(text="PriceCrypto")
async def send_random_value(call: types.CallbackQuery):
    global CryptoPrice
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = (
        "BTC",
        "TRX",
        "BNB",
        "ETH",
        "LTC",
        "TON",
        "XRP",
        "SOL",
        "MATIC",
        "DOGE",
        "–°–∏–≥–Ω–∞–ª—ã",
        "–ú–µ–Ω—é"
    )
    keyboard.add(*buttons)
    await call.message.delete()
    await call.message.answer("–í–≤–µ–¥–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ <b>–ö—Ä–∏–ø—Ç—É</b>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    CryptoPrice[0] = 1


@dp.message_handler(lambda msg: msg.text.lower() == "–∫—É—Ä—Å crypto")
async def bot_commands_handler(message_from: types.Message) -> None:
    global CryptoPrice
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = (
        "BTC",
        "TRX",
        "BNB",
        "ETH",
        "LTC",
        "TON",
        "XRP",
        "SOL",
        "MATIC",
        "DOGE",
        "–ú–µ–Ω—é"
    )
    keyboard.add(*buttons)
    await message_from.answer("–í–≤–µ–¥–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ <b>–ö—Ä–∏–ø—Ç—É</b>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    CryptoPrice[0] = 1


@dp.callback_query_handler(text="AddProduct")
async def send_random_value(call: types.CallbackQuery):

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = await SQLite_db.search_all_category()
    keyboard.add(*buttons)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    await call.message.delete()
    await call.message.answer("–í–≤–µ–¥–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ <b>–ö–ê–¢–ï–ì–û–†–ò–Æ</b> —Ç–æ–≤–∞—Ä–∞", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global AddProduct1
    AddProduct1[0] = 1


@dp.callback_query_handler(text="DelProduct")
async def send_random_value(call: types.CallbackQuery):

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    await call.message.delete()
    await call.message.answer(f"<b>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è <i>–¢–û–í–ê–†–ê</i> –≤–≤–µ–¥–∏ –µ–≥–æ id\n\n*–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤–≤–µ–¥–∏ –∏—Ö id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</b>\n\n{await SQLite_db.db_read_delete_product()}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global DelProduct
    DelProduct[0] = 1


@dp.callback_query_handler(text="SendingAll")
async def send_random_value(call: types.CallbackQuery):
    if await SQLite_db.db_read_id(call.from_user.id, role_db) == "Admin" or await SQLite_db.db_read_id(call.from_user.id, role_db) == "SuperAdmin":
        await call.message.answer('–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n\n*–î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ HTML —Ç–µ–≥–∏:\n\n<b>–∂–∏—Ä–Ω—ã–π</b>\n<i>–∫—É—Ä—Å–∏–≤</i>\n<u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>\n<s>–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>\n<tg-spoiler>—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –Ω–∞–∂–∞—Ç—å, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è</tg-spoiler>\n<a href="—Å—Å—ã–ª–∫–∞">—Å—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ</a>\n<a href="tg://user?id=1040628188">–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id 1040628188</a>\n<code>–±–ª–æ–∫ –∫–æ–¥–∞</code>')
        global SandAll
        SandAll[0] = 1


@dp.callback_query_handler(text="WriteProduct")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω", "–û—Ç–º–µ–Ω–∞")
    await call.message.delete()
    await call.message.answer(f"<b>–î–ª—è <i>–ò–ó–ú–ï–ù–ï–ù–ò–Ø</i> —Ç–æ–≤–∞—Ä–∞ –≤–≤–µ–¥–∏ –µ–≥–æ id\n\n*–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤–≤–µ–¥–∏ –∏—Ö id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</b>\n\n{await SQLite_db.db_read_delete_product()}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global WriteProduct
    WriteProduct[0] = 1


@dp.callback_query_handler(text="UpPriceAll")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    await call.message.delete()
    await call.message.answer(f"<b>–ù–∞ —Å–∫–æ–ª—å–∫–æ –£–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–Ω—ã <u>–í–°–ï–•</u> —Ç–æ–≤–∞—Ä–æ–≤?\n\n</b>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global UpPriceAll
    UpPriceAll[0] = 1


@dp.callback_query_handler(text="UpPriceAllCent")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    await call.message.delete()
    await call.message.answer(f"<b>–ù–∞ —Å–∫–æ–ª—å–∫–æ % –ü–†–û–¶–ï–ù–¢–û–í % —É–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–Ω—ã <u>–í–°–ï–•</u> —Ç–æ–≤–∞—Ä–æ–≤?\n\n</b>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global UpPriceAllCent
    UpPriceAllCent[0] = 1


@dp.callback_query_handler(text="DownPriceAll")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    await call.message.delete()
    await call.message.answer(f"<b>–ù–∞ —Å–∫–æ–ª—å–∫–æ –°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—ã <u>–í–°–ï–•</u> —Ç–æ–≤–∞—Ä–æ–≤?\n\n</b>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global DownPriceAll
    DownPriceAll[0] = 1


@dp.callback_query_handler(text="DownPriceAllCent")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    await call.message.delete()
    await call.message.answer(f"<b>–ù–∞ —Å–∫–æ–ª—å–∫–æ % –ü–†–û–¶–ï–ù–¢–û–í % –°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—ã <u>–í–°–ï–•</u> —Ç–æ–≤–∞—Ä–æ–≤?\n\n</b>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    global DownPriceAllCent
    DownPriceAllCent[0] = 1


@dp.message_handler(content_types="text")
async def bot_commands_handler(message_from: types.Message) -> None:
    user_id: str = str(message_from.from_id)

    global AddProduct1, DelProduct, WriteProduct, SandAll, CryptoPrice, SetAdmin, DelCategory, Promo, Setpromo, DelPromo, ClearPromo, SearchUser, DelUser, UpPriceAll, DownPriceAll, UpPriceAllCent, DownPriceAllCent

    if AddProduct1[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            AddProduct1 = [0]
        else:
            AddProduct1.append(message_from.text)
            await message_from.answer("–í–≤–µ–¥–∏ <b>–ù–ê–ó–í–ê–ù–ò–ï</b> —Ç–æ–≤–∞—Ä–∞", parse_mode=types.ParseMode.HTML)
            AddProduct1[0] = 2
    elif AddProduct1[0] == 2:
        AddProduct1.append(message_from.text)
        await message_from.answer("–í–≤–µ–¥–∏ <b>–û–ü–ò–°–ê–ù–ò–ï</b> —Ç–æ–≤–∞—Ä–∞", parse_mode=types.ParseMode.HTML)
        AddProduct1[0] = 3
    elif AddProduct1[0] == 3:
        AddProduct1.append(message_from.text)
        await message_from.answer("–í–≤–µ–¥–∏ <b>–¶–ï–ù–£</b> —Ç–æ–≤–∞—Ä–∞", parse_mode=types.ParseMode.HTML)
        AddProduct1[0] = 4
    elif AddProduct1[0] == 4:
        try:
            AddProduct1.append(int(message_from.text))
            await message_from.answer("–í–≤–µ–¥–∏ <b>–ö–û–õ–ò–ß–ï–°–¢–í–û</b> —Ç–æ–≤–∞—Ä–∞", parse_mode=types.ParseMode.HTML)
            AddProduct1[0] = 5
        except:
            await message_from.answer("üõë–û—à–∏–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ!\n\n–í–≤–µ–¥–∏ –ß–ò–°–õ–û –µ—â–µ —Ä–∞–∑")
            AddProduct1[0] = 4
    elif AddProduct1[0] == 5:
        try:
            await message_from.answer(await SQLite_db.db_add_product(AddProduct1[1], AddProduct1[2], AddProduct1[3], int(message_from.text), AddProduct1[4]), reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            AddProduct1 = [0]
        except:
            await message_from.answer("üõë–û—à–∏–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ!\n\n–í–≤–µ–¥–∏ –ß–ò–°–õ–û –µ—â–µ —Ä–∞–∑")
            AddProduct1[0] = 5

    if DelProduct[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            DelProduct = [0]
        else:
            try:
                a = int(message_from.text)
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                buttons = ["–î–∞", "–ù–µ—Ç"]
                keyboard.add(*buttons)
                await message_from.answer(f"<b>–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?</b>\n\nid:<b>{await SQLite_db.db_read_id_product(int(message_from.text),0)}</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è:<b>{await SQLite_db.db_read_id_product(int(message_from.text),1)}</b>\n\n–ù–∞–∑–≤–∞–Ω–∏–µ:<b>{await SQLite_db.db_read_id_product(int(message_from.text),2)}</b>\n\n–û–ø–∏—Å–∞–Ω–∏–µ:<i>{await SQLite_db.db_read_id_product(int(message_from.text),3)}</i>\n\n–¶–µ–Ω–∞:<u>{await SQLite_db.db_read_id_product(int(message_from.text),4)}</u>\n\n", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                DelProduct[0] = 2
                DelProduct.append(int(message_from.text))
            except:
                try:
                    ListId = [int(x.strip())
                              for x in message_from.text.split(",")]
                    keyboard = types.ReplyKeyboardMarkup(
                        row_width=2, resize_keyboard=True)
                    buttons = ["–î–∞", "–ù–µ—Ç"]
                    keyboard.add(*buttons)
                    for id in ListId:
                        await message_from.answer(f"<b>–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?<b>\n\nid:<b>{await SQLite_db.db_read_id_product(int(id),0)}</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è:<b>{await SQLite_db.db_read_id_product(int(id),1)}</b>\n\n–ù–∞–∑–≤–∞–Ω–∏–µ:<b>{await SQLite_db.db_read_id_product(int(id),2)}</b>\n\n–û–ø–∏—Å–∞–Ω–∏–µ:<i>{await SQLite_db.db_read_id_product(int(id),3)}</i>\n\n–¶–µ–Ω–∞:<u>{await SQLite_db.db_read_id_product(int(id),4)}</u>\n\n", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                    DelProduct[0] = 3
                    DelProduct.append(ListId)
                except:
                    await message_from.answer(f"<b>üõë–û—à–∏–±–∫–∞<b>, –≤–≤–µ–¥–µ–Ω –Ω–µ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏ –°–ü–ò–°–û–ö –ß–ò–°–ï–õ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ò–õ–ò –ß–ò–°–õ–û –µ—â–µ —Ä–∞–∑\n\n*–∏–ª–∏ —Ç–∞–∫–∏—Ö id –Ω–µ—Ç", parse_mode=types.ParseMode.HTML)
    elif DelProduct[0] == 2:
        if message_from.text == "–î–∞":
            try:
                await SQLite_db.delete_product(DelProduct[1])
                await message_from.answer("üóëÔ∏è–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
                DelProduct = [0]
            except:
                await message_from.answer("üõë–û—à–∏–±–∫–∞\n\n–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –∏–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ id")
        else:
            await message_from.answer("‚ùå–£–¥–∞–ª–µ–Ω–∏–µ <b>–û–¢–ú–ï–ù–ï–ù–û</b>", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            DelProduct = [0]
    elif DelProduct[0] == 3:
        if message_from.text == "–î–∞":
            for id in DelProduct[1]:
                await SQLite_db.delete_product(id)
            await message_from.answer("üóëÔ∏è–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            DelProduct = [0]
        else:
            await message_from.answer("‚ùå–£–¥–∞–ª–µ–Ω–∏–µ <b>–û–¢–ú–ï–ù–ï–ù–û</b>", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            DelProduct = [0]

    if WriteProduct[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            WriteProduct = [0]
        elif message_from.text == "–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω":
            buttons = [types.InlineKeyboardButton(
                text="–ü–æ–¥–Ω—è—Ç—å —Ü–µ–Ω—ã", callback_data="UpPriceAll"), types.InlineKeyboardButton(
                text="–°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—ã", callback_data="DownPriceAll"), types.InlineKeyboardButton(
                text="–ü–æ–¥–Ω—è—Ç—å —Ü–µ–Ω—ã –Ω–∞ %", callback_data="UpPriceAllCent"), types.InlineKeyboardButton(
                text="–°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ %", callback_data="DownPriceAllCent")]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)
            WriteProduct = [0]
            await message_from.answer("<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤</b>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
        else:
            try:
                a = int(message_from.text)
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                buttons = ["–î–∞", "–ù–µ—Ç"]
                keyboard.add(*buttons)
                await message_from.answer(f"<b>–¢–æ—á–Ω–æ –ò–ó–ú–ï–ù–ò–¢–¨ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?</b>\n\nid: <b>{await SQLite_db.db_read_id_product(int(message_from.text),0)}</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{await SQLite_db.db_read_id_product(int(message_from.text),1)}</b>\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{await SQLite_db.db_read_id_product(int(message_from.text),2)}</b>\n\n–û–ø–∏—Å–∞–Ω–∏–µ: <i>{await SQLite_db.db_read_id_product(int(message_from.text),3)}</i>\n\n–¶–µ–Ω–∞: <u>{await SQLite_db.db_read_id_product(int(message_from.text),4)}</u>\n\n–ö–æ–ª-–≤–æ: <u>{await SQLite_db.db_read_id_product(int(message_from.text),5)}</u>\n\n", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                WriteProduct[0] = 2
                WriteProduct[1] = int(message_from.text)
            except:
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                buttons = ["–û—Ç–º–µ–Ω–∞"]
                keyboard.add(*buttons)
                await message_from.answer("üõë<b>–û—à–∏–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ß–ò–°–õ–û –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é", reply_markup=keyboard)
                WriteProduct[0] = 1
    elif WriteProduct[0] == 2:
        if message_from.text == "–î–∞":
            keyboard = types.ReplyKeyboardMarkup(
                row_width=2, resize_keyboard=True)
            buttons = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—é", "–ù–∞–∑–≤–∞–Ω–∏–µ",
                       "–û–ø–∏—Å–∞–Ω–∏–µ", "–¶–µ–Ω—É", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            keyboard.add(*buttons)
            await message_from.answer("–ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ò–ó–ú–ï–ù–ò–¢–¨ —É —Ç–æ–≤–∞—Ä–∞?", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

            WriteProduct[0] = 3
        else:
            await message_from.answer("‚ùå–ò–ó–ú–ï–ù–ï–ù–ò–ï <b>–û–¢–ú–ï–ù–ï–ù–û</b>", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            WriteProduct = [0]
    elif WriteProduct[0] == 3:
        if message_from.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏—é":
            await message_from.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—é</b> —Ç–æ–≤–∞—Ä–∞", parse_mode=types.ParseMode.HTML)
            WriteProduct[2] = 1
            WriteProduct[0] = 4
        elif message_from.text == "–ù–∞–∑–≤–∞–Ω–∏–µ":
            await message_from.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞", parse_mode=types.ParseMode.HTML)
            WriteProduct[2] = 2
            WriteProduct[0] = 4
        elif message_from.text == "–û–ø–∏—Å–∞–Ω–∏–µ":
            await message_from.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ <b>–û–ø–∏—Å–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞", parse_mode=types.ParseMode.HTML)
            WriteProduct[2] = 3
            WriteProduct[0] = 4
        elif message_from.text == "–¶–µ–Ω—É":
            await message_from.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é <b>–¶–µ–Ω—É</b> —Ç–æ–≤–∞—Ä–∞", parse_mode=types.ParseMode.HTML)
            WriteProduct[2] = 4
            WriteProduct[0] = 4
        elif message_from.text == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ":
            await message_from.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> —Ç–æ–≤–∞—Ä–∞", parse_mode=types.ParseMode.HTML)
            WriteProduct[2] = 5
            WriteProduct[0] = 4
        elif message_from.text == "–ú–µ–Ω—é":
            await message_from.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            WriteProduct = [0, 0, 0]
    elif WriteProduct[0] == 4:
        keyboard = types.ReplyKeyboardMarkup(
            row_width=2, resize_keyboard=True)
        buttons = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—é", "–ù–∞–∑–≤–∞–Ω–∏–µ",
                   "–û–ø–∏—Å–∞–Ω–∏–µ", "–¶–µ–Ω—É", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ú–µ–Ω—é"]
        keyboard.add(*buttons)
        try:
            if WriteProduct[2] == 1:
                await SQLite_db.db_write_product_category(message_from.text, WriteProduct[1])
            elif WriteProduct[2] == 2:
                await SQLite_db.db_write_product_name(message_from.text, WriteProduct[1])
            elif WriteProduct[2] == 3:
                await SQLite_db.db_write_product_descript(message_from.text, WriteProduct[1])
            elif WriteProduct[2] == 4:
                await SQLite_db.db_write_product_price(message_from.text, WriteProduct[1])
            elif WriteProduct[2] == 5:
                await SQLite_db.db_write_product_count(message_from.text, WriteProduct[1])

            await message_from.answer(f"<b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\nid: <b>{await SQLite_db.db_read_id_product(int(WriteProduct[1]),0)}</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{await SQLite_db.db_read_id_product(int(WriteProduct[1]),1)}</b>\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{await SQLite_db.db_read_id_product(int(WriteProduct[1]),2)}</b>\n\n–û–ø–∏—Å–∞–Ω–∏–µ: <i>{await SQLite_db.db_read_id_product(int(WriteProduct[1]),3)}</i>\n\n–¶–µ–Ω–∞: <u>{await SQLite_db.db_read_id_product(int(WriteProduct[1]),4)}</u>\n\n–ö–æ–ª-–≤–æ: <u>{await SQLite_db.db_read_id_product(int(WriteProduct[1]),5)}</u>\n\n", parse_mode=types.ParseMode.HTML)
            await message_from.answer("–ò–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –≤ —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ?", reply_markup=keyboard)
            WriteProduct[0] = 3
        except:
            await message_from.answer("üõë–û—à–∏–±–∫–∞\n\n–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ(–∞)")

    if SandAll[0] == 1:
        keyboard = types.ReplyKeyboardMarkup(
            row_width=2, resize_keyboard=True)
        buttons = ["–†–∞–∑–æ—Å–ª–∞—Ç—å", "–û—Ç–º–µ–Ω–∞"]
        keyboard.add(*buttons)
        await message_from.answer(f"<b>–ë—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n{message_from.text}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
        SandAll.append(message_from.text)
        SandAll[0] = 2
    elif SandAll[0] == 2:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=await AdminKeyboard())
            SandAll = [0]
        else:

            NotUsers = []
            users = await SQLite_db.db_read_all_id()
            for row in users:
                try:
                    await bot.send_message(row[0], SandAll[1], parse_mode=types.ParseMode.HTML)
                except:
                    NotUsers.append(row[0])
            string = "\n".join(NotUsers)
            if string == "":
                string = "–Ω–µ—Ç —Ç–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            await message_from.answer(f"‚úÖ<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:\n<i>{string}</i>", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            SandAll = [0]

    if CryptoPrice[0] == 1:
        if message_from.text == "–°–∏–≥–Ω–∞–ª—ã":
            pass
        else:
            # –ü–∞—Ä—Å–µ—Ä —Ü–µ–Ω—ã –¥–æ–ª–ª–∞—Ä–∞
            async def get_currency_price(currency):
                url = f"https://www.cbr.ru/scripts/XML_daily.asp?date_req="
                response = requests.get(url)
                if response.status_code == 200:
                    pattern = fr"<CharCode>{currency}</CharCode>.+?<Value>(.*?)</Value>"
                    result = re.search(pattern, response.text, re.DOTALL)
                    if result:
                        return result.group(1).replace(",", ".")
                    else:
                        return "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                else:
                    return "üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"

            if CryptoPrice[1] == 0:
                url = f'https://api.bybit.com/v2/public/symbols'

                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ API ByBit
                    response = requests.get(url)
                    data = response.json()
                    pairs = [pair['name'] for pair in data['result']]
                    # pairs_text = '\n'.join(pairs)

                    pairs2 = list(
                        filter(lambda x: message_from.text.upper() in x, pairs))

                    countis = 0
                    keyboard = types.ReplyKeyboardMarkup(
                        row_width=2, resize_keyboard=True)
                    buttons = ["–î–∞", "–û—Ç–º–µ–Ω–∞"]
                    keyboard.add(*buttons)

                    for item in pairs2:
                        url = f'https://api.bybit.com/v2/public/tickers?symbol={item}'
                        try:
                            response = requests.get(url)
                            data = response.json()
                            # –≤—ã–±–æ—Ä –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö, —Å–Ω–∞—á–∞–ª–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–ª—é—á—É –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–ø–∏—Å–æ–∫ –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–ª–æ–≤–∞—Ä—å
                            price = data['result'][0]['last_price']
                            cent = data['result'][0]['price_24h_pcnt']
                            if cent[0] == "-":
                                cent2 = str(round(float(cent)*100, 2)
                                            ).replace('-', 'üü• ')
                            elif cent[0] != "-":
                                cent2 = "üü¢ " + str(round(float(cent)*100, 2))
                            await message_from.answer(f"–¶–µ–Ω–∞ {str(item).replace('USDT', '')}: <b>{format(float(price), ',.3f')} $</b>  =>  <i>{format(round(float(await get_currency_price('USD'))*float(price), 2), ',.2f')} ‚ÇΩ</i>\n<u>{cent2} %</u>", parse_mode=types.ParseMode.HTML)
                            countis += 1
                            pairs2.pop(0)
                            if countis >= 10:
                                await message_from.answer(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö?\n*–ò—Ö –µ—â–µ –º–Ω–æ–≥–æ", reply_markup=keyboard)
                                CryptoPrice[1] = 1
                                CryptoPrice.append(pairs2)
                                break
                        except Exception as e:
                            await message_from.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ üõë–û—à–∏–±–∫–∞: {e}')

                except Exception as e:
                    await message_from.reply(f"üõë–û—à–∏–±–∫–∞, –í–≤–µ–¥–∏ –ø–æ–∏—Å–∫ –µ—â–µ —Ä–∞–∑\n\n{e}")

            elif CryptoPrice[1] == 1:
                if message_from.text == "–û—Ç–º–µ–Ω–∞":
                    CryptoPrice = [0, 0]
                    await message_from.answer(f"–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard())
                else:
                    for item in CryptoPrice[2]:
                        url = f'https://api.bybit.com/v2/public/tickers?symbol={item}'
                        try:
                            response = requests.get(url)
                            data = response.json()
                            price = data['result'][0]['last_price']
                            await message_from.answer(f"–¶–µ–Ω–∞ {str(item).replace('USDT', '').replace('USD', '')}: <b>{format(float(price), ',.2f')} $</b>  =>  <i>{format(round(float(await get_currency_price('USD'))*float(price), 2), ',.2f')} ‚ÇΩ</i>", parse_mode=types.ParseMode.HTML)
                            if CryptoPrice == [0, 0]:
                                break
                        except Exception as e:
                            await message_from.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ üõë–û—à–∏–±–∫–∞: {e}')
                    else:
                        keyboard = types.ReplyKeyboardMarkup(
                            resize_keyboard=True)
                        buttons = (
                            "BTC",
                            "TRX",
                            "BNB",
                            "ETH",
                            "LTC",
                            "TON",
                            "XRP",
                            "SOL",
                            "MATIC",
                            "DOGE",
                            "–ú–µ–Ω—é"
                        )
                        keyboard.add(*buttons)
                        await message_from.answer("–í–≤–µ–¥–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ <b>–ö—Ä–∏–ø—Ç—É</b>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    if SetAdmin[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            SetAdmin = [0]
            await message_from.answer(f"–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard())
        else:
            try:
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                buttons = []
                if list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][1] == "user":
                    buttons = ["–ù–∞–∑–Ω–∞—á–∏—Ç—å –ê–¥–º–∏–Ω–æ–º", "–ù–∞–∑–Ω–∞—á–∏—Ç—å –°—É–ø–µ—Ä –ê–¥–º–∏–Ω–æ–º"]
                elif list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][1] == "Admin":
                    buttons = ["–ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                               "–ù–∞–∑–Ω–∞—á–∏—Ç—å –°—É–ø–µ—Ä –ê–¥–º–∏–Ω–æ–º"]
                elif list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][1] == "SuperAdmin":
                    buttons = ["–ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                               "–ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ê–¥–º–∏–Ω–∞"]
                buttons.append("–û—Ç–º–µ–Ω–∞")
                keyboard.add(*buttons)
                await message_from.answer(f"id: {list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][0]}\n\n–†–æ–ª—å: [{list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][1]}]\n\n–ù–∏–∫ @{list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][4]}", reply_markup=keyboard)
                SetAdmin.append(
                    list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][0])
                SetAdmin[0] = 2
            except Exception as e:
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                buttons = ["–û—Ç–º–µ–Ω–∞"]
                keyboard.add(*buttons)
                await message_from.answer(f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω</b>, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫ –µ—â–µ —Ä–∞–∑\n\n*{e}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    elif SetAdmin[0] == 2:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            SetAdmin = [0]
            await message_from.answer(f"–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard())
        elif message_from.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å –ê–¥–º–∏–Ω–æ–º" or message_from.text == "–ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ê–¥–º–∏–Ω–∞":
            if message_from.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å –ê–¥–º–∏–Ω–æ–º":
                await bot.send_message(SetAdmin[1], "üíé–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã <b>–ê–¥–º–∏–Ω–æ–º</b>", parse_mode=types.ParseMode.HTML)
            elif message_from.text == "–ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ê–¥–º–∏–Ω–∞":
                await bot.send_message(SetAdmin[1], "‚¨áÔ∏è–í—ã –ø–æ–Ω–∏–∂–µ–Ω—ã –¥–æ <b>–ê–¥–º–∏–Ω–∞</b>", parse_mode=types.ParseMode.HTML)
            keyboard = types.ReplyKeyboardMarkup(
                row_width=2, resize_keyboard=True)
            buttons = ["–ù–∞–∑–Ω–∞—á–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", "–ú–µ–Ω—é"]
            keyboard.add(*buttons)
            await SQLite_db.db_write_Admin("Admin", SetAdmin[1])
            await message_from.answer(f"–ê–¥–º–∏–Ω—ã{await ListAdmin()}\n\n*üòé –°—É–ø–µ—Ä–ê–¥–º–∏–Ω", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            SetAdmin = [0]
        elif message_from.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å –°—É–ø–µ—Ä –ê–¥–º–∏–Ω–æ–º":
            await bot.send_message(SetAdmin[1], "üíé–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã <b>–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–æ–º</b>", parse_mode=types.ParseMode.HTML)
            keyboard = types.ReplyKeyboardMarkup(
                row_width=2, resize_keyboard=True)
            buttons = ["–ù–∞–∑–Ω–∞—á–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", "–ú–µ–Ω—é"]
            keyboard.add(*buttons)
            await SQLite_db.db_write_Admin("SuperAdmin", SetAdmin[1])
            await message_from.answer(f"–ê–¥–º–∏–Ω—ã{await ListAdmin()}\n\n*üòé –°—É–ø–µ—Ä–ê–¥–º–∏–Ω", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            SetAdmin = [0]
        elif message_from.text == "–ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            await bot.send_message(SetAdmin[1], "‚ùå–í—ã —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ <b>–ê–¥–º–∏–Ω–∞</b>", parse_mode=types.ParseMode.HTML)
            keyboard = types.ReplyKeyboardMarkup(
                row_width=2, resize_keyboard=True)
            buttons = ["–ù–∞–∑–Ω–∞—á–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", "–ú–µ–Ω—é"]
            keyboard.add(*buttons)
            await SQLite_db.db_write_Admin("user", SetAdmin[1])
            await message_from.answer(f"–ê–¥–º–∏–Ω—ã\n{await ListAdmin()}\n\n*üòé –°—É–ø–µ—Ä–ê–¥–º–∏–Ω", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            SetAdmin = [0]

    if DelCategory[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            DelCategory = [0]
        else:
            try:
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                buttons = ["–î–∞", "–û—Ç–º–µ–Ω–∞"]
                keyboard.add(*buttons)
                await message_from.answer(f"<b>–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ö–ê–¢–ï–ì–û–†–ò–Æ?</b>\n\n<b>{message_from.text.upper()}</b>\n\n{await SQLite_db.db_read_product_Category(message_from.text)}\n\n‚ö†Ô∏è–í—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                DelCategory[0] = 2
                DelCategory.append(message_from.text)
            except Exception as e:
                await message_from.answer(f"üõë–û—à–∏–±–∫–∞\n\n*{e}")
    elif DelCategory[0] == 2:
        if message_from.text == "–î–∞":
            try:
                await SQLite_db.delete_category(DelCategory[1])
                await message_from.answer("üóëÔ∏è–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
                DelCategory = [0]
            except Exception as e:
                await message_from.answer(f"üõë–û—à–∏–±–∫–∞\n\n*{e}")
        else:
            await message_from.answer("‚ùå–£–¥–∞–ª–µ–Ω–∏–µ <b>–û–¢–ú–ï–ù–ï–ù–û</b>", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            DelCategory = [0]

    if Promo[0] == 1:
        try:
            if int(await SQLite_db.db_read_promo(message_from.text, 2)) > 0:
                string = str(await SQLite_db.db_read_id(message_from.from_id, 5)).split()
                num = 1

                for x in string:
                    if x == message_from.text:
                        num = 0

                if num == 0:
                    await message_from.answer("‚ùå–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥")
                else:
                    num = int(re.search(r'\d+', message_from.text).group())
                    money = int(await SQLite_db.db_read_id(message_from.from_id, money_db))
                    await SQLite_db.db_write_money(money+num, message_from.from_id)
                    await message_from.answer("‚úÖ–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    string2 = f"{str(await SQLite_db.db_read_id(message_from.from_id, 5))} {str(message_from.text)}"
                    await SQLite_db.db_write_promo(string2, message_from.from_id)
                    await SQLite_db.db_write_promo_count(int(await SQLite_db.db_read_promo(message_from.text, 2))-1, message_from.text)
                    Promo = [0]
            else:
                await message_from.answer("‚òπÔ∏è–ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
                Promo = [0]
        except Exception as e:
            await message_from.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç \n\n*{e}")
            Promo = [0]

    if Setpromo[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            Setpromo = [0]
        else:
            Setpromo.append(message_from.text)
            await message_from.answer("–í–≤–µ–¥–∏ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", parse_mode=types.ParseMode.HTML)
            Setpromo[0] = 2
    elif Setpromo[0] == 2:
        count = int(message_from.text)
        await SQLite_db.Add_promo(count, Setpromo[1])
        NumPromo = int(re.search(r'\d+', Setpromo[1]).group())
        await message_from.answer(f"<b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n–°—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {NumPromo}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {count}", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
        Setpromo = [0]

    if DelPromo[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            DelPromo = [0]
        else:
            try:
                await SQLite_db.delete_promo(message_from.text)
                await message_from.answer("üóëÔ∏è–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", parse_mode=types.ParseMode.HTML)

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                buttons = ("–û—Ç–º–µ–Ω–∞")
                keyboard.add(buttons)
                message = []
                for prom in list(await SQLite_db.db_read_all_promo()):
                    if prom[2] > 0:
                        message.append(
                            str(f"<b>{prom[1]}</b>  |  {prom[2]}   üü¢\n"))
                    elif prom[2] <= 0:
                        message.append(
                            str(f"<b>{prom[1]}</b>  |  {prom[2]}   üî¥\n"))
                string = "\n".join(message)
                await message_from.answer(f"<b>–í—Å–µ –ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n{string}\n\n<u>–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å</u>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            except Exception as e:
                await message_from.answer(f"üõë–û—à–∏–±–∫–∞\n\n*{e}")

    if ClearPromo[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            ClearPromo = [0]
        else:
            await SQLite_db.Clear_promo()
            await message_from.answer(f"‚úÖ–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö –û–ß–ò–©–ï–ù–´", reply_markup=await AdminKeyboard())
            ClearPromo = [0]

    if SearchUser[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            buttons = [types.InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(text="–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="CountUser"), types.InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser")]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            SearchUser = [0, 0]
            await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
        else:
            try:
                try:
                    a = int(message_from.text)
                    keyboard = types.ReplyKeyboardMarkup(
                        row_width=2, resize_keyboard=True)
                    buttons = ["‚ûï –±–∞–ª–∞–Ω—Å", "‚ûñ –±–∞–ª–∞–Ω—Å", "–û—Ç–º–µ–Ω–∞"]
                    keyboard.add(*buttons)
                    await message_from.answer(f"ID: {message_from.text}\n\n–†–æ–ª—å: {await SQLite_db.db_read_id(message_from.text, 1)}\n\n–ë–∞–ª–∞–Ω—Å: {await SQLite_db.db_read_id(message_from.text, 2)} \n\n–ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º–º—É: {await SQLite_db.db_read_id(message_from.text, 3)}\n\n–ù–∏–∫: @{await SQLite_db.db_read_id(message_from.text, 4)}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                    SearchUser[0] = 2
                    SearchUser[1] = int(message_from.text)
                except:
                    keyboard = types.ReplyKeyboardMarkup(
                        row_width=2, resize_keyboard=True)
                    buttons = ["‚ûï –±–∞–ª–∞–Ω—Å", "‚ûñ –±–∞–ª–∞–Ω—Å", "–û—Ç–º–µ–Ω–∞"]
                    keyboard.add(*buttons)
                    await message_from.answer(f"ID: {list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][0]}\n\n–†–æ–ª—å: [{list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][1]}]\n\n–ë–∞–ª–∞–Ω—Å: {list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][2]} \n\n–ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º–º—É: {list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][3]}\n\n–ù–∏–∫: {message_from.text}", reply_markup=keyboard)
                    SearchUser[0] = 2
                    SearchUser[1] = str(message_from.text)
            except:
                await message_from.answer("üõë–û—à–∏–±–∫–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑")
    elif SearchUser[0] == 2:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            buttons = [types.InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(text="–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="CountUser"), types.InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser")]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            SearchUser = [0, 0]
            await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
        elif message_from.text == "‚ûï –±–∞–ª–∞–Ω—Å":
            await message_from.answer(f"<b>–í–≤–µ–¥–∏ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å–∞</b>", parse_mode=types.ParseMode.HTML)
            SearchUser[0] = 3
        elif message_from.text == "‚ûñ –±–∞–ª–∞–Ω—Å":
            await message_from.answer(f"<b>–í–≤–µ–¥–∏ —Å–∫–æ–ª—å–∫–æ –æ—Ç–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å–∞</b>", parse_mode=types.ParseMode.HTML)
            SearchUser[0] = 4
    elif SearchUser[0] == 3:
        try:
            if message_from.text == "–û—Ç–º–µ–Ω–∞":
                buttons = [types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(text="–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="CountUser"), types.InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser"), types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—é", callback_data="SearchIfUser")]
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(*buttons)
                await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                SearchUser = [0, 0]
                await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            else:
                a = int(SearchUser[1])
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                buttons = ["‚ûï –±–∞–ª–∞–Ω—Å", "‚ûñ –±–∞–ª–∞–Ω—Å", "–û—Ç–º–µ–Ω–∞"]
                keyboard.add(*buttons)
                plusMoney = int(await SQLite_db.db_read_id(SearchUser[1], 2)) + int(message_from.text)
                await SQLite_db.db_write_money(int(plusMoney), SearchUser[1])
                await message_from.answer(f"ID: {SearchUser[1]}\n\n–†–æ–ª—å: {await SQLite_db.db_read_id(SearchUser[1], 1)}\n\n–ë–∞–ª–∞–Ω—Å: {await SQLite_db.db_read_id(SearchUser[1], 2)} \n\n–ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º–º—É: {await SQLite_db.db_read_id(SearchUser[1], 3)}\n\n–ù–∏–∫: @{await SQLite_db.db_read_id(SearchUser[1], 4)}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                SearchUser[0] = 2
        except:
            if message_from.text == "–û—Ç–º–µ–Ω–∞":
                buttons = [types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(text="–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="CountUser"), types.InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser"), types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—é", callback_data="SearchIfUser")]
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(*buttons)
                await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                SearchUser = [0, 0]
                await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            else:
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                buttons = ["‚ûï –±–∞–ª–∞–Ω—Å", "‚ûñ –±–∞–ª–∞–Ω—Å", "–û—Ç–º–µ–Ω–∞"]
                keyboard.add(*buttons)
                plusMoney2 = int(list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][2]) + int(message_from.text)
                await SQLite_db.db_write_money(int(plusMoney2), int(list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][0]))
                await message_from.answer(f"ID: {list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][0]}\n\n–†–æ–ª—å: [{list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][1]}]\n\n–ë–∞–ª–∞–Ω—Å: {list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][2]} \n\n–ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º–º—É: {list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][3]}\n\n–ù–∏–∫: {SearchUser[1]}", reply_markup=keyboard)
                SearchUser[0] = 2
    elif SearchUser[0] == 4:
        try:
            if message_from.text == "–û—Ç–º–µ–Ω–∞":
                buttons = [types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(text="–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="CountUser"), types.InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser"), types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—é", callback_data="SearchIfUser")]
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(*buttons)
                await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                SearchUser = [0, 0]
                await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            else:
                a = int(SearchUser[1])
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                buttons = ["‚ûï –±–∞–ª–∞–Ω—Å", "‚ûñ –±–∞–ª–∞–Ω—Å", "–û—Ç–º–µ–Ω–∞"]
                keyboard.add(*buttons)
                plusMoney = int(await SQLite_db.db_read_id(SearchUser[1], 2)) - int(message_from.text)
                if plusMoney < 0:
                    plusMoney = 0
                await SQLite_db.db_write_money(int(plusMoney), SearchUser[1])
                await message_from.answer(f"ID: {SearchUser[1]}\n\n–†–æ–ª—å: {await SQLite_db.db_read_id(SearchUser[1], 1)}\n\n–ë–∞–ª–∞–Ω—Å: {await SQLite_db.db_read_id(SearchUser[1], 2)} \n\n–ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º–º—É: {await SQLite_db.db_read_id(SearchUser[1], 3)}\n\n–ù–∏–∫: @{await SQLite_db.db_read_id(SearchUser[1], 4)}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                SearchUser[0] = 2
        except:
            if message_from.text == "–û—Ç–º–µ–Ω–∞":
                buttons = [types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(text="–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="CountUser"), types.InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser"), types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—é", callback_data="SearchIfUser")]
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(*buttons)
                await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                SearchUser = [0, 0]
                await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            else:
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                buttons = ["‚ûï –±–∞–ª–∞–Ω—Å", "‚ûñ –±–∞–ª–∞–Ω—Å", "–û—Ç–º–µ–Ω–∞"]
                keyboard.add(*buttons)
                plusMoney2 = int(list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][2]) - int(message_from.text)
                if plusMoney2 < 0:
                    plusMoney2 = 0
                await SQLite_db.db_write_money(int(plusMoney2), int(list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][0]))
                await message_from.answer(f"ID: {list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][0]}\n\n–†–æ–ª—å: [{list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][1]}]\n\n–ë–∞–ª–∞–Ω—Å: {list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][2]} \n\n–ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º–º—É: {list(await SQLite_db.db_read_username(str(SearchUser[1]).upper().replace('@', '')))[0][3]}\n\n–ù–∏–∫: {SearchUser[1]}", reply_markup=keyboard)
                SearchUser[0] = 2

    if DelUser[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            buttons = [types.InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(text="–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="CountUser"), types.InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser")]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            DelUser = [0, 0]
            await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
        else:
            try:
                try:
                    keyboard = types.ReplyKeyboardMarkup(
                        row_width=2, resize_keyboard=True)
                    buttons = ["–î–∞", "–û—Ç–º–µ–Ω–∞"]
                    keyboard.add(*buttons)
                    a = int(message_from.text)
                    a = a + a
                    await message_from.answer(f"<b>–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</b>\n\nID: {message_from.text}\n\n–†–æ–ª—å: {await SQLite_db.db_read_id(message_from.text, 1)}\n\n–ë–∞–ª–∞–Ω—Å: {await SQLite_db.db_read_id(message_from.text, 2)} \n\n–ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º–º—É: {await SQLite_db.db_read_id(message_from.text, 3)}\n\n–ù–∏–∫: @{await SQLite_db.db_read_id(message_from.text, 4)}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                    DelUser[0] = 2
                    DelUser[1] = int(message_from.text)
                except:
                    try:
                        keyboard = types.ReplyKeyboardMarkup(
                            row_width=2, resize_keyboard=True)
                        buttons = ["–î–∞", "–û—Ç–º–µ–Ω–∞"]
                        keyboard.add(*buttons)
                        await message_from.answer(f"<b>–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</b>\n\nID: {list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][0]}\n\n–†–æ–ª—å: [{list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][1]}]\n\n–ë–∞–ª–∞–Ω—Å: {list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][2]} \n\n–ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º–º—É: {list(await SQLite_db.db_read_username(str(message_from.text).upper().replace('@', '')))[0][3]}\n\n–ù–∏–∫: {message_from.text}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                        DelUser[0] = 2
                        DelUser[1] = str(message_from.text)
                    except:
                        try:
                            ListId = [x.strip()
                                      for x in message_from.text.split(",")]
                            keyboard = types.ReplyKeyboardMarkup(
                                row_width=2, resize_keyboard=True)
                            buttons = ["–î–∞", "–û—Ç–º–µ–Ω–∞"]
                            keyboard.add(*buttons)
                            ListID2 = []
                            for id in ListId:
                                try:
                                    try:
                                        await message_from.answer(f"ID: {id}\n\n–†–æ–ª—å: {await SQLite_db.db_read_id(id, 1)}\n\n–ë–∞–ª–∞–Ω—Å: {await SQLite_db.db_read_id(id, 2)} \n\n–ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º–º—É: {await SQLite_db.db_read_id(id, 3)}\n\n–ù–∏–∫: @{await SQLite_db.db_read_id(id, 4)}", parse_mode=types.ParseMode.HTML)
                                        ListID2.append(id)
                                    except:
                                        await message_from.answer(f"ID: {list(await SQLite_db.db_read_username(str(id).upper().replace('@', '')))[0][0]}\n\n–†–æ–ª—å: [{list(await SQLite_db.db_read_username(str(id).upper().replace('@', '')))[0][1]}]\n\n–ë–∞–ª–∞–Ω—Å: {list(await SQLite_db.db_read_username(str(id).upper().replace('@', '')))[0][2]} \n\n–ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º–º—É: {list(await SQLite_db.db_read_username(str(id).upper().replace('@', '')))[0][3]}\n\n–ù–∏–∫: {id}", reply_markup=keyboard)
                                        ListID2.append(list(await SQLite_db.db_read_username(str(id).upper().replace('@', '')))[0][0])
                                except:
                                    await message_from.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{id}</b> –ù–ï –ù–ê–ô–î–ï–ù", parse_mode=types.ParseMode.HTML)

                            if not ListID2:
                                buttons = [types.InlineKeyboardButton(
                                    text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(
                                    text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser"), types.InlineKeyboardButton(
                                    text="–ü–æ–∏—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—é", callback_data="SearchIfUser")]
                                keyboard2 = types.InlineKeyboardMarkup(
                                    row_width=1)
                                keyboard2.add(*buttons)
                                user, admin, superadmin = await SQLite_db.Count_All_User()
                                await message_from.answer(f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\nüòÄ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user}\n\nüíé–ê–¥–º–∏–Ω–æ–≤: {admin}\n\nüòé–°—É–ø–µ—Ä–ê–¥–º–∏–Ω–æ–≤: {superadmin}", reply_markup=keyboard2, parse_mode=types.ParseMode.HTML)
                                await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
                                DelUser = [0, 0]
                            else:
                                DelUser[0] = 3
                                DelUser[1] = (ListID2)
                                await message_from.answer(f"<b>–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –í–°–ï–• —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?</b>", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                        except:
                            await message_from.answer(f"üõë–û—à–∏–±–∫–∞, –≤–≤–µ–¥–µ–Ω –Ω–µ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏ –°–ü–ò–°–û–ö –ß–ò–°–ï–õ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ò–õ–ò –ß–ò–°–õ–û –µ—â–µ —Ä–∞–∑\n\n*–∏–ª–∏ —Ç–∞–∫–∏—Ö id –Ω–µ—Ç")
            except:
                await message_from.answer("üõë–û—à–∏–±–∫–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑")
    elif DelUser[0] == 2:
        try:
            if message_from.text == "–û—Ç–º–µ–Ω–∞":
                buttons = [types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(text="–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="CountUser"), types.InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser"), types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—é", callback_data="SearchIfUser")]
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(*buttons)
                await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                DelUser = [0, 0]
                await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            else:
                a = int(DelUser[1])

                await SQLite_db.delete_user(DelUser[1])
                buttons = [types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser"), types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—é", callback_data="SearchIfUser")]
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(*buttons)
                user, admin, superadmin = await SQLite_db.Count_All_User()
                await message_from.answer(f"üóëÔ∏è<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>", parse_mode=types.ParseMode.HTML)
                await message_from.answer(f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\nüòÄ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user}\n\nnüíé–ê–¥–º–∏–Ω–æ–≤: {admin}\\nnnüòé–°—É–ø–µ—Ä–ê–¥–º–∏–Ω–æ–≤: {superadmin}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
                DelUser = [0, 0]
        except:
            if message_from.text == "–û—Ç–º–µ–Ω–∞":
                buttons = [types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(text="–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="CountUser"), types.InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser"), types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—é", callback_data="SearchIfUser")]
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(*buttons)
                await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                SearchUser = [0, 0]
                await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            else:
                await SQLite_db.delete_user(list(await SQLite_db.db_read_username(str(DelUser[1]).upper().replace('@', '')))[0][0])
                buttons = [types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser"), types.InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—é", callback_data="SearchIfUser")]
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(*buttons)
                user, admin, superadmin = await SQLite_db.Count_All_User()
                await message_from.answer(f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>", parse_mode=types.ParseMode.HTML)
                await message_from.answer(f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\nüòÄ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user}\n\nnüíé–ê–¥–º–∏–Ω–æ–≤: {admin}\nn\nüòé–°—É–ø–µ—Ä–ê–¥–º–∏–Ω–æ–≤: {superadmin}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
                DelUser = [0]
    elif DelUser[0] == 3:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            buttons = [types.InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(text="–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="CountUser"), types.InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser")]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            DelUser = [0, 0]
            await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
        else:
            for id in DelUser[1]:
                await SQLite_db.delete_user(id)

            buttons = [types.InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="SearchUser"), types.InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="DelUser")]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)
            user, admin, superadmin = await SQLite_db.Count_All_User()
            await message_from.answer(f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!</b>", parse_mode=types.ParseMode.HTML)
            await message_from.answer(f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\nüòÄ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user}\n\nüíé–ê–¥–º–∏–Ω–æ–≤: {admin}\n\nüòé–°—É–ø–µ—Ä–ê–¥–º–∏–Ω–æ–≤: {superadmin}", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            await message_from.answer("–ú–µ–Ω—é", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            DelUser = [0, 0]

    if UpPriceAll[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            UpPriceAll = [0]
        else:
            try:
                UpPricePlus = int(message_from.text)
                await SQLite_db.UpPrice("+", UpPricePlus)
                await message_from.answer(f"–¶–µ–Ω—ã –Ω–∞ –í–°–ï —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –ü–û–î–ù–Ø–¢–´ –Ω–∞ {UpPricePlus}", reply_markup=await AdminKeyboard())
                UpPriceAll = [0]
            except:
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                keyboard.add("–û—Ç–º–µ–Ω–∞")
                await message_from.answer("üõë<b>–û—à–∏–±–∫–∞</b>, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –µ—â–µ —Ä–∞–∑", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                UpPriceAll[0] = 1

    if DownPriceAll[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            DownPriceAll = [0]
        else:
            try:
                DownPriceAlMinus = int(message_from.text)
                await SQLite_db.UpPrice("-", DownPriceAlMinus)
                await message_from.answer(f"–¶–µ–Ω—ã –Ω–∞ –í–°–ï —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –°–ù–ò–ñ–ï–ù–´ –Ω–∞ {DownPriceAlMinus}", reply_markup=await AdminKeyboard())
                DownPriceAll = [0]
            except:
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                keyboard.add("–û—Ç–º–µ–Ω–∞")
                await message_from.answer("üõë<b>–û—à–∏–±–∫–∞</b>, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –µ—â–µ —Ä–∞–∑", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                DownPriceAll[0] = 1

    if UpPriceAllCent[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            UpPriceAllCent = [0]
        else:
            try:
                UpPriceAllCentMulti = int(message_from.text)
                await SQLite_db.UpPrice("*", UpPriceAllCentMulti)
                await message_from.answer(f"–¶–µ–Ω—ã –Ω–∞ –í–°–ï —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –ü–û–î–ù–Ø–¢–´ –Ω–∞ {UpPriceAllCentMulti} %", reply_markup=await AdminKeyboard())
                UpPriceAllCent = [0]
            except:
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                keyboard.add("–û—Ç–º–µ–Ω–∞")
                await message_from.answer("üõë<b>–û—à–∏–±–∫–∞</b>, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –µ—â–µ —Ä–∞–∑", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                UpPriceAllCent[0] = 1

    if DownPriceAllCent[0] == 1:
        if message_from.text == "–û—Ç–º–µ–Ω–∞":
            await message_from.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await AdminKeyboard(), parse_mode=types.ParseMode.HTML)
            DownPriceAllCent = [0]
        else:
            try:
                DownPriceAllCentDiv = int(message_from.text)
                await SQLite_db.UpPrice("/", DownPriceAllCentDiv)
                await message_from.answer(f"–¶–µ–Ω—ã –Ω–∞ –í–°–ï —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –°–ù–ò–ñ–ï–ù–´ –Ω–∞ {DownPriceAllCentDiv} %", reply_markup=await AdminKeyboard())
                DownPriceAllCent = [0]
            except:
                keyboard = types.ReplyKeyboardMarkup(
                    row_width=2, resize_keyboard=True)
                keyboard.add("–û—Ç–º–µ–Ω–∞")
                await message_from.answer("üõë<b>–û—à–∏–±–∫–∞</b>, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –µ—â–µ —Ä–∞–∑", reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                DownPriceAllCent[0] = 1


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
